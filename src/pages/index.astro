---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/png" href="/favicon.png" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Zain's Terminal Portfolio - Tokyo Night</title>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&display=swap" rel="stylesheet">
	</head>
	<body>
		<div id="terminal">
			<div id="boot-sequence" class="boot-screen">
				<div class="boot-content"></div>
			</div>
			<div id="interactive-terminal" class="terminal-screen" style="display: none;">
				<div class="terminal-header">
					<div class="terminal-title">Zain's Portfolio Terminal</div>
					<div class="terminal-controls">
						<span class="control minimize"></span>
						<span class="control maximize"></span>
						<span class="control close"></span>
					</div>
				</div>
				<div class="terminal-body">
					<div id="terminal-output"></div>
					<div class="input-line">
						<span class="prompt">zain@portfolio:~$ </span>
						<input type="text" id="terminal-input" autocomplete="off" spellcheck="false">
						<span class="cursor">_</span>
					</div>
				</div>
			</div>
		</div>

		<style>
			:root {
				/* Tokyo Night Color Palette */
				--bg-primary: #1a1b26;
				--bg-secondary: #16161e;
				--bg-tertiary: #24283b;
				--fg-primary: #c0caf5;
				--fg-secondary: #a9b1d6;
				--fg-muted: #565f89;
				--accent-blue: #7aa2f7;
				--accent-purple: #bb9af7;
				--accent-cyan: #7dcfff;
				--success: #9ece6a;
				--warning: #e0af68;
				--error: #f7768e;
				--border: #414868;
				--shadow: rgba(26, 27, 38, 0.8);
			}

			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}

			body {
				font-family: 'JetBrains Mono', 'Fira Code', 'Cascadia Code', monospace;
				background: var(--bg-primary);
				color: var(--fg-primary);
				overflow: hidden;
				height: 100vh;
				font-size: 14px;
				line-height: 1.5;
			}

			#terminal {
				width: 100vw;
				height: 100vh;
				position: relative;
				background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
			}

			.boot-screen {
				width: 100%;
				height: 100%;
				background: var(--bg-primary);
				display: flex;
				align-items: center;
				justify-content: center;
				position: relative;
			}

			.boot-screen::before {
				content: '';
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				background: linear-gradient(
					transparent 50%,
					rgba(122, 162, 247, 0.02) 50%
				);
				background-size: 100% 2px;
				pointer-events: none;
				animation: scanlines 0.08s linear infinite;
			}

			@keyframes scanlines {
				0% { transform: translateY(0); }
				100% { transform: translateY(2px); }
			}

			.boot-content {
				font-size: 13px;
				line-height: 1.6;
				text-align: left;
				white-space: pre-wrap;
				max-width: 85%;
				color: var(--fg-secondary);
			}

			.skip-instruction {
				position: absolute;
				top: 24px;
				right: 24px;
				font-size: 11px;
				color: var(--fg-muted);
				background: var(--bg-tertiary);
				padding: 10px 16px;
				border: 1px solid var(--border);
				border-radius: 8px;
				backdrop-filter: blur(10px);
				animation: pulse 2s infinite;
				box-shadow: 0 4px 12px var(--shadow);
			}

			@keyframes pulse {
				0%, 100% { opacity: 0.8; }
				50% { opacity: 1; }
			}

			.terminal-screen {
				width: 95%;
				height: 90%;
				max-width: 1200px;
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
				background: var(--bg-secondary);
				border: 1px solid var(--border);
				border-radius: 12px;
				box-shadow: 
					0 20px 40px var(--shadow),
					0 0 0 1px rgba(122, 162, 247, 0.1),
					inset 0 1px 0 rgba(192, 202, 245, 0.1);
				backdrop-filter: blur(20px);
			}

			.terminal-header {
				background: var(--bg-tertiary);
				padding: 12px 20px;
				display: flex;
				justify-content: space-between;
				align-items: center;
				border-bottom: 1px solid var(--border);
				border-radius: 12px 12px 0 0;
			}

			.terminal-title {
				font-size: 13px;
				font-weight: 600;
				color: var(--fg-primary);
				display: flex;
				align-items: center;
				gap: 8px;
			}

			.terminal-title::before {
				content: '‚óè';
				color: var(--accent-blue);
				font-size: 8px;
			}

			.terminal-controls {
				display: flex;
				gap: 8px;
			}

			.control {
				width: 12px;
				height: 12px;
				border-radius: 50%;
				border: none;
				cursor: pointer;
				transition: all 0.2s ease;
			}

			.control:hover {
				transform: scale(1.1);
			}

			.minimize { background: var(--warning); }
			.maximize { background: var(--success); }
			.close { background: var(--error); }

			.terminal-body {
				padding: 20px 24px;
				height: calc(100% - 49px);
				overflow-y: auto;
				position: relative;
				background: var(--bg-primary);
			}

			/* Custom scrollbar styling */
			.terminal-body::-webkit-scrollbar {
				width: 8px;
			}

			.terminal-body::-webkit-scrollbar-track {
				background: var(--bg-secondary);
				border-radius: 4px;
			}

			.terminal-body::-webkit-scrollbar-thumb {
				background: var(--border);
				border-radius: 4px;
				transition: background 0.2s ease;
			}

			.terminal-body::-webkit-scrollbar-thumb:hover {
				background: var(--accent-blue);
			}

			.terminal-body::-webkit-scrollbar-corner {
				background: var(--bg-secondary);
			}

			/* Firefox scrollbar styling */
			.terminal-body {
				scrollbar-width: thin;
				scrollbar-color: var(--border) var(--bg-secondary);
			}

			#terminal-output {
				margin-bottom: 20px;
				white-space: pre-wrap;
				font-size: 13px;
				line-height: 1.6;
				color: var(--fg-primary);
			}

			.input-line {
				display: flex;
				align-items: center;
				position: sticky;
				bottom: 0;
				background: var(--bg-primary);
				padding: 8px 0;
				border-top: 1px solid var(--border);
				margin-top: 12px;
			}

			.prompt {
				color: var(--accent-blue);
				margin-right: 12px;
				font-weight: 600;
				font-size: 13px;
			}

			#terminal-input {
				background: transparent;
				border: none;
				color: var(--fg-primary);
				font-family: inherit;
				font-size: 13px;
				outline: none;
				flex: 1;
				padding: 4px 0;
			}

			#terminal-input::placeholder {
				color: var(--fg-muted);
			}

			.cursor {
				animation: blink 1.2s infinite;
				margin-left: 4px;
				color: var(--accent-cyan);
			}

			@keyframes blink {
				0%, 50% { opacity: 1; }
				51%, 100% { opacity: 0; }
			}

			.typing {
				border-right: 2px solid var(--accent-cyan);
				animation: typing 0.1s steps(1) infinite;
			}

			@keyframes typing {
				0% { border-color: var(--accent-cyan); }
				50% { border-color: transparent; }
			}

			.command-output {
				margin: 12px 0;
				color: var(--fg-primary);
			}

			.error {
				color: var(--error);
			}

			.success {
				color: var(--success);
			}

			.info {
				color: var(--accent-blue);
			}

			.ascii-art {
				color: var(--accent-cyan);
				font-size: 11px;
				line-height: 1.3;
			}

			.skill-bar {
				display: flex;
				align-items: center;
				margin: 6px 0;
			}

			.skill-name {
				width: 140px;
				display: inline-block;
				color: var(--fg-secondary);
				font-size: 12px;
			}

			.skill-progress {
				flex: 1;
				background: var(--bg-tertiary);
				height: 8px;
				margin: 0 12px;
				position: relative;
				border-radius: 4px;
				overflow: hidden;
			}

			.skill-fill {
				height: 100%;
				background: linear-gradient(90deg, var(--accent-blue), var(--accent-purple));
				transition: width 2s ease-in-out;
				border-radius: 4px;
			}

			.loading-spinner {
				display: inline-block;
				animation: spin 1s linear infinite;
				color: var(--accent-blue);
			}

			@keyframes spin {
				0% { transform: rotate(0deg); }
				100% { transform: rotate(360deg); }
			}

			/* Enhanced text styling */
			h1, h2, h3 {
				color: var(--accent-blue);
				margin: 16px 0 8px 0;
			}

			strong {
				color: var(--accent-purple);
				font-weight: 600;
			}

			em {
				color: var(--accent-cyan);
				font-style: normal;
			}

			/* Command history styling */
			.command-history {
				color: var(--fg-muted);
			}

			/* Progress bars and loading elements */
			.progress-bar {
				background: var(--bg-tertiary);
				border-radius: 4px;
				overflow: hidden;
				height: 6px;
				margin: 4px 0;
			}

			.progress-fill {
				background: linear-gradient(90deg, var(--success), var(--accent-cyan));
				height: 100%;
				transition: width 0.3s ease;
			}
		</style>

		<script>
			class TerminalPortfolio {
				constructor() {
					this.bootContent = document.querySelector('.boot-content');
					this.bootScreen = document.getElementById('boot-sequence');
					this.terminalScreen = document.getElementById('interactive-terminal');
					this.output = document.getElementById('terminal-output');
					this.input = document.getElementById('terminal-input');
					this.commandHistory = [];
					this.historyIndex = -1;
					this.currentDirectory = '~';
					
					this.commands = {
						help: () => this.showHelp(),
						whoami: () => this.showWhoAmI(),
						ls: () => this.listFiles(),
						'cat about.txt': () => this.showAbout(),
						'./projects.sh': () => this.showProjects(),
						'skills --list': () => this.showSkills(),
						'skills --verbose': () => this.showSkillsVerbose(),
						'tail experience.log': () => this.showExperience(),
						contact: () => this.showContact(),
						clear: () => this.clearTerminal(),
						'sudo make-coffee': () => this.makeCoffee(),
						'rm -rf /boredom': () => this.removeBoredom(),
						'ls -la /secrets': () => this.showSecrets(),
						date: () => new Date().toString(),
						pwd: () => `/home/zain${this.currentDirectory === '~' ? '' : '/' + this.currentDirectory}`,
						uname: () => 'ZainOS 1.0.0 (Creative-Developer-Edition)',
						uptime: () => 'up 25 years, 0 users, load average: ‚àû'
					};

					// Tab completion data
					this.availableCommands = Object.keys(this.commands);
					this.availableFiles = [
						'about.txt',
						'projects.sh',
						'skills.json',
						'experience.log',
						'contact.vcard',
						'projects/',
						'.secrets/',
						'projects/1.md',
						'projects/2.md',
						'projects/3.md',
						'projects/4.md',
						'projects/5.md'
					];
					this.commandFlags = {
						'ls': ['-la', '-l', '-a'],
						'skills': ['--list', '--verbose'],
						'rm': ['-rf'],
						'sudo': ['make-coffee'],
						'cat': ['about.txt', 'projects/1.md', 'projects/2.md', 'projects/3.md', 'projects/4.md', 'projects/5.md'],
						'tail': ['experience.log']
					};

					this.init();
				}

				async init() {
					await this.runBootSequence();
					this.setupTerminal();
				}

				async runBootSequence() {
					this.bootSkipped = false;
					this.bootComplete = false;
					
					// Add skip instruction
					const skipInstruction = document.createElement('div');
					skipInstruction.className = 'skip-instruction';
					skipInstruction.textContent = 'Press ENTER to skip boot sequence';
					this.bootScreen.appendChild(skipInstruction);
					
					// Set up skip functionality
					const skipHandler = (e) => {
						if (e.key === 'Enter' && !this.bootComplete) {
							this.bootSkipped = true;
							document.removeEventListener('keydown', skipHandler);
							this.skipToEnd();
						}
					};
					document.addEventListener('keydown', skipHandler);

					const bootMessages = [
						'BIOS v2.4.1 - Zain\'s Portfolio System',
						'Copyright (C) 2024 Creative Developer Inc.',
						'',
						'Memory Test: 32GB OK',
						'CPU: Intel Core i7-Creative @ 3.8GHz',
						'GPU: NVIDIA GeForce RTX-Imagination',
						'',
						'Loading kernel modules...',
						'[‚úì] personality.ko loaded',
						'[‚úì] skills.ko loaded',
						'[‚úì] experience.ko loaded',
						'[‚úì] creativity.ko loaded',
						'[‚úì] problem_solving.ko loaded',
						'',
						'Starting services...',
						'[‚úì] Web Development Service',
						'[‚úì] Problem Solving Daemon',
						'[‚úì] Coffee Brewing Service',
						'[‚úì] Late Night Coding Mode',
						'[‚úì] Debugging Wizard',
						'',
						'Initializing portfolio interface...',
						'Loading user data... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%',
						'Mounting projects filesystem... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%',
						'Starting interactive shell... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%',
						'',
						'System ready. Press ENTER to continue...'
					];

					for (let i = 0; i < bootMessages.length; i++) {
						if (this.bootSkipped) break;
						
						await this.typeText(bootMessages[i] + '\n', 50);
						if (bootMessages[i].includes('Loading') || bootMessages[i].includes('Starting')) {
							await this.sleep(200);
						}
					}

					this.bootComplete = true;
					
					if (!this.bootSkipped) {
						await this.sleep(1000);
					}
					
					// Set up continue functionality
					const continueHandler = (e) => {
						if (e.key === 'Enter') {
							document.removeEventListener('keydown', continueHandler);
							this.transitionToTerminal();
						}
					};
					document.addEventListener('keydown', continueHandler);
				}

				async skipToEnd() {
					// Clear current content and show final message
					this.bootContent.textContent = '';
					await this.typeText('Boot sequence skipped...\n\nSystem ready. Press ENTER to continue...', 10);
				}

				async transitionToTerminal() {
					this.bootScreen.style.opacity = '0';
					this.bootScreen.style.transition = 'opacity 1s ease-out';
					
					setTimeout(() => {
						this.bootScreen.style.display = 'none';
						this.terminalScreen.style.display = 'block';
						this.terminalScreen.style.opacity = '0';
						this.terminalScreen.style.transition = 'opacity 1s ease-in';
						
						setTimeout(() => {
							this.terminalScreen.style.opacity = '1';
							this.showWelcomeMessage();
							this.input.focus();
						}, 100);
					}, 1000);
				}

				async showWelcomeMessage() {
					const welcome = `<strong>Zain's Portfolio Terminal v2.0.0</strong> <span class="ascii-art">Tokyo Night Edition</span>
<span class="info">Last login:</span> ${new Date().toLocaleString()} from <em>creative-mind.local</em>

<span class="success">Welcome to my interactive portfolio!</span>
Type <span class="info">'help'</span> to see available commands or just start exploring.

<span class="ascii-art">‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üí° Tip: This terminal supports full command history and     ‚îÇ
‚îÇ    modern shortcuts. Try exploring with different commands! ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</span>

`;
					await this.typeToOutput(welcome, 8);
				}

				setupTerminal() {
					this.input.addEventListener('keydown', (e) => {
						if (e.key === 'Enter') {
							this.executeCommand();
						} else if (e.key === 'ArrowUp') {
							e.preventDefault();
							this.navigateHistory(-1);
						} else if (e.key === 'ArrowDown') {
							e.preventDefault();
							this.navigateHistory(1);
						} else if (e.key === 'Tab') {
							e.preventDefault();
							this.handleTabCompletion();
						}
					});
				}

				async executeCommand() {
					const command = this.input.value.trim();
					if (!command) return;

					this.commandHistory.push(command);
					this.historyIndex = this.commandHistory.length;

					// Clear input immediately after capturing command
					this.input.value = '';

					await this.typeToOutput(`zain@portfolio:~$ ${command}\n`, 0);
					
					if (this.commands[command]) {
						const result = await this.commands[command]();
						if (result) {
							await this.typeToOutput(result + '\n\n', 8);
						}
					} else {
						await this.typeToOutput(`Command not found: ${command}\nType 'help' for available commands.\n\n`, 8);
					}

					this.scrollToBottom();
				}

				navigateHistory(direction) {
					if (this.commandHistory.length === 0) return;

					this.historyIndex += direction;
					
					if (this.historyIndex < 0) {
						this.historyIndex = 0;
					} else if (this.historyIndex >= this.commandHistory.length) {
						this.historyIndex = this.commandHistory.length;
						this.input.value = '';
						return;
					}

					this.input.value = this.commandHistory[this.historyIndex] || '';
				}

				handleTabCompletion() {
					const currentInput = this.input.value;
					const cursorPosition = this.input.selectionStart;
					const textBeforeCursor = currentInput.substring(0, cursorPosition);
					const words = textBeforeCursor.split(' ').filter(word => word.length > 0);
					const currentWord = words.length > 0 ? words[words.length - 1] : '';

					let suggestions = [];

					if (words.length === 0 || (words.length === 1 && textBeforeCursor.endsWith(currentWord))) {
						// Complete commands
						suggestions = this.availableCommands.filter(cmd => 
							cmd.startsWith(currentWord.toLowerCase())
						);
					} else {
						// Complete arguments and file paths
						const command = words[0].toLowerCase();
						
						// Check if we have specific completions for this command
						if (this.commandFlags[command]) {
							if (currentWord.startsWith('-')) {
								// Complete flags
								suggestions = this.commandFlags[command].filter(flag => 
									flag.startsWith(currentWord)
								);
							} else {
								// Complete files for commands that take file arguments
								if (['cat', 'tail'].includes(command)) {
									suggestions = this.availableFiles.filter(file => 
										file.startsWith(currentWord)
									);
								} else if (command === 'sudo' && words.length === 2) {
									suggestions = ['make-coffee'].filter(subcmd => 
										subcmd.startsWith(currentWord)
									);
								}
							}
						} else {
							// General file completion
							suggestions = this.availableFiles.filter(file => 
								file.startsWith(currentWord)
							);
						}
					}

					// Handle completion
					if (suggestions.length === 1) {
						// Single match - complete it
						this.completeInput(suggestions[0], currentWord, textBeforeCursor, currentInput, cursorPosition);
					} else if (suggestions.length > 1) {
						// Multiple matches - show suggestions and complete common prefix
						this.showCompletionSuggestions(suggestions, currentWord);
						
						const commonPrefix = this.findCommonPrefix(suggestions);
						if (commonPrefix.length > currentWord.length) {
							this.completeInput(commonPrefix, currentWord, textBeforeCursor, currentInput, cursorPosition);
						}
					} else if (suggestions.length === 0 && currentWord.length > 0) {
						// No matches - show a subtle indication
						this.showNoCompletions();
					}
				}

				completeInput(completion, currentWord, textBeforeCursor, currentInput, cursorPosition) {
					const beforeWord = textBeforeCursor.substring(0, textBeforeCursor.lastIndexOf(currentWord));
					const afterCursor = currentInput.substring(cursorPosition);
					
					this.input.value = beforeWord + completion + afterCursor;
					const newPosition = beforeWord.length + completion.length;
					this.input.setSelectionRange(newPosition, newPosition);
				}

				async showNoCompletions() {
					// Just a subtle visual feedback - could be enhanced with a brief flash or sound
					this.input.style.borderBottom = '1px solid var(--error)';
					setTimeout(() => {
						this.input.style.borderBottom = 'none';
					}, 200);
				}

				findCommonPrefix(strings) {
					if (strings.length === 0) return '';
					if (strings.length === 1) return strings[0];

					let prefix = '';
					const firstString = strings[0];
					
					for (let i = 0; i < firstString.length; i++) {
						const char = firstString[i];
						if (strings.every(str => str[i] === char)) {
							prefix += char;
						} else {
							break;
						}
					}
					
					return prefix;
				}

				async showCompletionSuggestions(suggestions, currentWord) {
					const suggestionText = `\n<span class="info">Possible completions:</span>\n${suggestions.map(s => `  <span class="success">${s}</span>`).join('\n')}\n`;
					await this.typeToOutput(`zain@portfolio:~$ ${this.input.value}`, 0);
					await this.typeToOutput(suggestionText, 0);
				}

				async typeText(text, speed = 15) {
					const tokens = this.tokenizeText(text);
					for (let token of tokens) {
						this.bootContent.textContent += token;
						await this.sleep(speed);
					}
				}

				async typeToOutput(text, speed = 8) {
					const span = document.createElement('span');
					this.output.appendChild(span);
					
					// Check if text contains HTML tags for styling
					if (text.includes('<')) {
						span.innerHTML = text;
						this.scrollToBottom();
					} else {
						const tokens = this.tokenizeText(text);
						for (let token of tokens) {
							span.textContent += token;
							this.scrollToBottom();
							await this.sleep(speed);
						}
					}
				}

				tokenizeText(text) {
					// Split text into tokens (words, punctuation, whitespace)
					const tokens = [];
					let currentToken = '';
					
					for (let i = 0; i < text.length; i++) {
						const char = text[i];
						
						if (char === ' ' || char === '\n' || char === '\t') {
							if (currentToken) {
								tokens.push(currentToken);
								currentToken = '';
							}
							tokens.push(char);
						} else if (/[.,!?;:()[\]{}'"<>]/.test(char)) {
							if (currentToken) {
								tokens.push(currentToken);
								currentToken = '';
							}
							tokens.push(char);
						} else if (char === '‚ñà' || char === '‚ñë') {
							// Handle progress bar characters individually for smooth animation
							if (currentToken) {
								tokens.push(currentToken);
								currentToken = '';
							}
							tokens.push(char);
						} else {
							currentToken += char;
						}
					}
					
					if (currentToken) {
						tokens.push(currentToken);
					}
					
					return tokens;
				}

				sleep(ms) {
					return new Promise(resolve => setTimeout(resolve, ms));
				}

				scrollToBottom() {
					const terminalBody = document.querySelector('.terminal-body');
					terminalBody.scrollTop = terminalBody.scrollHeight;
				}

				clearTerminal() {
					this.output.innerHTML = '';
					return '';
				}

				showHelp() {
					return `<strong>Available commands:</strong>

<em>Basic Commands:</em>
  <span class="info">help</span>              Show this help message
  <span class="info">whoami</span>            Display information about me
  <span class="info">ls</span>                List available files and directories
  <span class="info">clear</span>             Clear the terminal screen
  <span class="info">pwd</span>               Show current directory
  <span class="info">date</span>              Show current date and time
  <span class="info">uname</span>             Show system information

<em>Portfolio Commands:</em>
  <span class="success">cat about.txt</span>     Read detailed information about me
  <span class="success">./projects.sh</span>     Launch interactive project browser
  <span class="success">skills --list</span>     Show my technical skills
  <span class="success">skills --verbose</span>  Show detailed skill levels with progress bars
  <span class="success">tail experience.log</span>  Show my work experience
  <span class="success">contact</span>           Display contact information

<em>Easter Eggs:</em>
  <span class="ascii-art">sudo make-coffee</span>  Brew some virtual coffee
  <span class="ascii-art">rm -rf /boredom</span>   Remove all boredom from the system
  <span class="ascii-art">ls -la /secrets</span>   List hidden secrets (if you dare)

<span class="info">üí° Pro tips:</span> 
  ‚Ä¢ Use arrow keys to navigate command history
  ‚Ä¢ Press <span class="success">Tab</span> for command and file completion
  ‚Ä¢ Try typing partial commands and press Tab to see suggestions`;
				}

				showWhoAmI() {
					return `<span class="ascii-art">
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó
    ‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë
      ‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë
     ‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù</span>

<strong>Hello! I'm Zain</strong>, a passionate full-stack developer who loves creating 
digital experiences that matter. I turn coffee into code and ideas 
into reality.

<em>Current Status:</em> Available for exciting opportunities
<em>Location:</em> Earth (Remote-friendly)
<em>Favorite Language:</em> JavaScript (but I speak many others)
<em>Superpower:</em> Debugging at 3 AM`;
				}

				listFiles() {
					return `total 42
drwxr-xr-x  8 zain zain  4096 ${new Date().toLocaleDateString()} .
drwxr-xr-x  3 root root  4096 ${new Date().toLocaleDateString()} ..
-rw-r--r--  1 zain zain  2048 ${new Date().toLocaleDateString()} about.txt
-rwxr-xr-x  1 zain zain  4096 ${new Date().toLocaleDateString()} projects.sh
-rw-r--r--  1 zain zain  1024 ${new Date().toLocaleDateString()} skills.json
-rw-r--r--  1 zain zain  8192 ${new Date().toLocaleDateString()} experience.log
-rw-r--r--  1 zain zain   512 ${new Date().toLocaleDateString()} contact.vcard
drwxr-xr-x  2 zain zain  4096 ${new Date().toLocaleDateString()} projects/
drwx------  2 zain zain  4096 ${new Date().toLocaleDateString()} .secrets/`;
				}

				showAbout() {
					return `<strong># About Zain</strong>

<em>## Who Am I?</em>
I'm a creative developer with a passion for building things that make 
people's lives easier and more enjoyable. With several years of experience 
in full-stack development, I've worked on everything from small business 
websites to large-scale applications.

<em>## What Drives Me?</em>
<span class="success">‚Ä¢</span> üöÄ Creating seamless user experiences
<span class="success">‚Ä¢</span> üîß Solving complex technical challenges  
<span class="success">‚Ä¢</span> üå± Continuous learning and growth
<span class="success">‚Ä¢</span> ü§ù Collaborating with amazing teams
<span class="success">‚Ä¢</span> ‚òï Converting caffeine into clean code

<em>## My Philosophy</em>
<span class="info">"Code is poetry written for machines but read by humans."</span>

I believe in writing clean, maintainable code that tells a story. 
Every project is an opportunity to learn something new and create 
something meaningful.

<em>## Fun Facts</em>
<span class="info">‚Ä¢</span> I've debugged code in my dreams (and it actually worked!)
<span class="info">‚Ä¢</span> My rubber duck debugging collection has 7 members
<span class="info">‚Ä¢</span> I can center a div in CSS... most of the time
<span class="info">‚Ä¢</span> Stack Overflow is my second home`;
				}

				showProjects() {
					return `
üöÄ PROJECT LAUNCHER v2.1.0
==============================

Loading projects... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%

Featured Projects:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 1. E-Commerce Platform                    [React, Node.js]  ‚îÇ
‚îÇ    Full-stack shopping experience with payment integration  ‚îÇ
‚îÇ                                                             ‚îÇ
‚îÇ 2. Task Management App                    [Vue.js, Python] ‚îÇ
‚îÇ    Collaborative project management with real-time updates ‚îÇ
‚îÇ                                                             ‚îÇ
‚îÇ 3. Weather Dashboard                      [JavaScript, API]‚îÇ
‚îÇ    Beautiful weather visualization with location services  ‚îÇ
‚îÇ                                                             ‚îÇ
‚îÇ 4. Portfolio Website                      [Astro, CSS]     ‚îÇ
‚îÇ    This very terminal you're using right now!              ‚îÇ
‚îÇ                                                             ‚îÇ
‚îÇ 5. Open Source Contributions             [Various]         ‚îÇ
‚îÇ    Contributing to the developer community                 ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

Type 'cat projects/[number].md' for detailed information
Example: cat projects/1.md`;
				}

				showSkills() {
					return `Technical Skills Inventory:
============================

Frontend:
  ‚Ä¢ JavaScript (ES6+)
  ‚Ä¢ TypeScript  
  ‚Ä¢ React.js
  ‚Ä¢ Vue.js
  ‚Ä¢ HTML5 & CSS3
  ‚Ä¢ Sass/SCSS
  ‚Ä¢ Tailwind CSS

Backend:
  ‚Ä¢ Node.js
  ‚Ä¢ Python
  ‚Ä¢ Express.js
  ‚Ä¢ FastAPI
  ‚Ä¢ RESTful APIs
  ‚Ä¢ GraphQL

Database:
  ‚Ä¢ PostgreSQL
  ‚Ä¢ MongoDB
  ‚Ä¢ Redis
  ‚Ä¢ SQLite

Tools & Others:
  ‚Ä¢ Git & GitHub
  ‚Ä¢ Docker
  ‚Ä¢ AWS/Cloud Services
  ‚Ä¢ Webpack/Vite
  ‚Ä¢ Jest/Testing
  ‚Ä¢ Linux/Unix

Use 'skills --verbose' for detailed proficiency levels.`;
				}

				async showSkillsVerbose() {
					const skills = [
						{ name: 'JavaScript', level: 95 },
						{ name: 'React.js', level: 90 },
						{ name: 'Node.js', level: 85 },
						{ name: 'TypeScript', level: 80 },
						{ name: 'Python', level: 75 },
						{ name: 'CSS/SCSS', level: 88 },
						{ name: 'Git', level: 92 },
						{ name: 'Docker', level: 70 },
						{ name: 'AWS', level: 65 },
						{ name: 'PostgreSQL', level: 78 }
					];

					let output = 'Skill Proficiency Analysis:\n';
					output += '=' .repeat(50) + '\n\n';

					for (const skill of skills) {
						const barLength = 30;
						const filled = Math.round((skill.level / 100) * barLength);
						const empty = barLength - filled;
						const bar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
						
						output += `${skill.name.padEnd(12)} [${bar}] ${skill.level}%\n`;
					}

					output += '\nLegend: ‚ñà = Proficient, ‚ñë = Learning\n';
					output += 'Note: These bars are animated in real-time!';

					return output;
				}

				showExperience() {
					return `[2024-01-15 09:00:00] INFO: Started new exciting opportunities
[2023-06-01 08:30:00] INFO: Completed major project milestone
[2023-03-15 14:20:00] DEBUG: Fixed critical production bug in 2 hours
[2022-11-20 16:45:00] INFO: Led team of 4 developers on React migration
[2022-08-10 10:15:00] SUCCESS: Deployed scalable microservices architecture
[2022-05-01 09:00:00] INFO: Promoted to Senior Developer role
[2021-12-15 13:30:00] INFO: Implemented CI/CD pipeline, reduced deploy time by 80%
[2021-09-01 08:00:00] INFO: Joined amazing development team
[2021-06-15 11:20:00] SUCCESS: Graduated with Computer Science degree
[2020-03-01 10:00:00] INFO: Started journey as Junior Developer

Use 'grep ERROR experience.log' to see challenges overcome
Use 'grep SUCCESS experience.log' to see major achievements`;
				}

				showContact() {
					return `
üìß CONTACT INFORMATION
======================

Email:    zain@example.com
LinkedIn: linkedin.com/in/zain-dev
GitHub:   github.com/zain-dev
Twitter:  @zain_codes
Website:  zain-portfolio.dev

üìç Location: Available for remote work worldwide
üïê Timezone: UTC+0 (flexible for collaboration)

üí¨ Preferred Contact Methods:
   1. Email (for formal inquiries)
   2. LinkedIn (for professional networking)
   3. GitHub (for code-related discussions)

üìù Currently: Open to new opportunities
üéØ Interests: Full-stack development, DevOps, Open Source

Feel free to reach out! I usually respond within 24 hours.`;
				}

				makeCoffee() {
					return `
‚òï COFFEE BREWING SYSTEM v3.1.4
===============================

Initializing coffee maker... ‚úì
Grinding beans... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%
Heating water to optimal temperature (195¬∞F)... ‚úì
Brewing... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%

        (  )   (   )  )
         ) (   )  (  (
         ( )  (    ) )
         _____________
        <_____________> ___
        |             |/ _ \\
        |               | | |
        |               |_| |
     ___|             |\\___/
    /    \\___________/    \\
    \\_____________________/

‚òï Your virtual coffee is ready!

WARNING: This coffee may cause increased productivity,
         better code quality, and sudden urges to refactor.

Side effects may include: staying up late coding,
having brilliant ideas at 3 AM, and an addiction to
clean, readable code.`;
				}

				removeBoredom() {
					return `
üóëÔ∏è  BOREDOM REMOVAL UTILITY v2.0
=================================

Scanning system for boredom... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%

Found boredom in:
  /usr/local/mundane_tasks/
  /home/zain/repetitive_work/
  /tmp/boring_meetings/
  /var/log/dull_moments.log

Removing boredom... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%

rm: removing '/boredom/lack_of_creativity'... ‚úì
rm: removing '/boredom/repetitive_tasks'... ‚úì  
rm: removing '/boredom/uninspiring_projects'... ‚úì
rm: removing '/boredom/monday_blues'... ‚úì

SUCCESS: All boredom has been successfully removed!

System now running at optimal creativity levels.
Fun.exe is now running in the background.
Inspiration daemon started successfully.

Warning: Side effects may include uncontrollable urges to
build cool projects and learn new technologies!`;
				}

				showSecrets() {
					return `
üîê ACCESSING CLASSIFIED DIRECTORY...
====================================

Authentication required... ‚úì
Decrypting files... ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%

total 13
-rw------- 1 zain zain  256 ${new Date().toLocaleDateString()} .hidden_talents
-rw------- 1 zain zain  128 ${new Date().toLocaleDateString()} .secret_projects  
-rw------- 1 zain zain  512 ${new Date().toLocaleDateString()} .future_plans
-rw------- 1 zain zain   64 ${new Date().toLocaleDateString()} .favorite_memes
-rw------- 1 zain zain  1024 ${new Date().toLocaleDateString()} .dream_job.txt

ü§´ Secret revealed: I once spent 6 hours debugging a problem
   that was caused by a missing semicolon. Don't tell anyone!

üéÆ Hidden talent: I can solve a Rubik's cube while explaining
   the difference between == and === in JavaScript.

üöÄ Secret project: Building an AI that generates perfect
   commit messages (still in beta, currently just suggests
   "fixed stuff" for everything).

üéØ Future plan: Become the developer who actually reads the
   documentation before asking questions on Stack Overflow.

Access granted. You're now part of the secret club! üéâ`;
				}
			}

			// Initialize the terminal when the page loads
			document.addEventListener('DOMContentLoaded', () => {
				new TerminalPortfolio();
			});
		</script>
	</body>
</html>
