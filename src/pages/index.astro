---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Zain's Terminal Portfolio</title>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&display=swap" rel="stylesheet">
	</head>
	<body>
		<div id="terminal">
			<div id="boot-sequence" class="boot-screen">
				<div class="boot-content"></div>
			</div>
			<div id="interactive-terminal" class="terminal-screen" style="display: none;">
				<div class="terminal-header">
					<div class="terminal-title">Zain's Portfolio Terminal</div>
					<div class="terminal-controls">
						<span class="control minimize"></span>
						<span class="control maximize"></span>
						<span class="control close"></span>
					</div>
				</div>
				<div class="terminal-body">
					<div id="terminal-output"></div>
					<div class="input-line">
						<span class="prompt">zain@portfolio:~$ </span>
						<input type="text" id="terminal-input" autocomplete="off" spellcheck="false">
						<span class="cursor">_</span>
					</div>
				</div>
			</div>
		</div>

		<style>
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}

			body {
				font-family: 'JetBrains Mono', monospace;
				background: #000;
				color: #00ff00;
				overflow: hidden;
				height: 100vh;
			}

			#terminal {
				width: 100vw;
				height: 100vh;
				position: relative;
			}

			.boot-screen {
				width: 100%;
				height: 100%;
				background: #000;
				display: flex;
				align-items: center;
				justify-content: center;
				position: relative;
			}

			.boot-screen::before {
				content: '';
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				background: linear-gradient(
					transparent 50%,
					rgba(0, 255, 0, 0.03) 50%
				);
				background-size: 100% 4px;
				pointer-events: none;
				animation: scanlines 0.1s linear infinite;
			}

			@keyframes scanlines {
				0% { transform: translateY(0); }
				100% { transform: translateY(4px); }
			}

			.boot-content {
				font-size: 14px;
				line-height: 1.4;
				text-align: left;
				white-space: pre-wrap;
				max-width: 80%;
			}

			.skip-instruction {
				position: absolute;
				top: 20px;
				right: 20px;
				font-size: 12px;
				color: rgba(0, 255, 0, 0.7);
				background: rgba(0, 0, 0, 0.8);
				padding: 8px 12px;
				border: 1px solid rgba(0, 255, 0, 0.3);
				border-radius: 4px;
				animation: pulse 2s infinite;
			}

			@keyframes pulse {
				0%, 100% { opacity: 0.7; }
				50% { opacity: 1; }
			}

			.terminal-screen {
				width: 90%;
				height: 85%;
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%, -50%);
				background: rgba(0, 0, 0, 0.95);
				border: 2px solid #00ff00;
				border-radius: 8px;
				box-shadow: 
					0 0 20px rgba(0, 255, 0, 0.3),
					inset 0 0 20px rgba(0, 255, 0, 0.1);
			}

			.terminal-header {
				background: rgba(0, 255, 0, 0.1);
				padding: 8px 16px;
				display: flex;
				justify-content: space-between;
				align-items: center;
				border-bottom: 1px solid #00ff00;
			}

			.terminal-title {
				font-size: 12px;
				font-weight: bold;
			}

			.terminal-controls {
				display: flex;
				gap: 8px;
			}

			.control {
				width: 12px;
				height: 12px;
				border-radius: 50%;
				border: 1px solid #00ff00;
			}

			.minimize { background: rgba(255, 255, 0, 0.3); }
			.maximize { background: rgba(0, 255, 0, 0.3); }
			.close { background: rgba(255, 0, 0, 0.3); }

			.terminal-body {
				padding: 16px;
				height: calc(100% - 40px);
				overflow-y: auto;
				position: relative;
			}

			/* Custom scrollbar styling */
			.terminal-body::-webkit-scrollbar {
				width: 12px;
			}

			.terminal-body::-webkit-scrollbar-track {
				background: rgba(0, 0, 0, 0.8);
				border: 1px solid #00ff00;
				border-radius: 6px;
			}

			.terminal-body::-webkit-scrollbar-thumb {
				background: linear-gradient(180deg, #00ff00, #008800);
				border-radius: 6px;
				border: 1px solid #00ff00;
				box-shadow: inset 0 0 4px rgba(0, 255, 0, 0.3);
			}

			.terminal-body::-webkit-scrollbar-thumb:hover {
				background: linear-gradient(180deg, #44ff44, #00aa00);
				box-shadow: 
					inset 0 0 4px rgba(0, 255, 0, 0.5),
					0 0 8px rgba(0, 255, 0, 0.3);
			}

			.terminal-body::-webkit-scrollbar-corner {
				background: rgba(0, 0, 0, 0.8);
			}

			/* Firefox scrollbar styling */
			.terminal-body {
				scrollbar-width: thin;
				scrollbar-color: #00ff00 rgba(0, 0, 0, 0.8);
			}

			#terminal-output {
				margin-bottom: 16px;
				white-space: pre-wrap;
				font-size: 14px;
				line-height: 1.4;
			}

			.input-line {
				display: flex;
				align-items: center;
				position: sticky;
				bottom: 0;
				background: rgba(0, 0, 0, 0.9);
			}

			.prompt {
				color: #00ff00;
				margin-right: 8px;
				font-weight: bold;
			}

			#terminal-input {
				background: transparent;
				border: none;
				color: #00ff00;
				font-family: inherit;
				font-size: 14px;
				outline: none;
				flex: 1;
			}

			.cursor {
				animation: blink 1s infinite;
				margin-left: 2px;
			}

			@keyframes blink {
				0%, 50% { opacity: 1; }
				51%, 100% { opacity: 0; }
			}

			.typing {
				border-right: 2px solid #00ff00;
				animation: typing 0.1s steps(1) infinite;
			}

			@keyframes typing {
				0% { border-color: #00ff00; }
				50% { border-color: transparent; }
			}

			.command-output {
				margin: 8px 0;
				color: #00ff00;
			}

			.error {
				color: #ff4444;
			}

			.success {
				color: #44ff44;
			}

			.info {
				color: #4444ff;
			}

			.ascii-art {
				color: #00ffff;
				font-size: 12px;
				line-height: 1.2;
			}

			.skill-bar {
				display: flex;
				align-items: center;
				margin: 4px 0;
			}

			.skill-name {
				width: 120px;
				display: inline-block;
			}

			.skill-progress {
				flex: 1;
				background: rgba(0, 255, 0, 0.2);
				height: 16px;
				margin: 0 8px;
				position: relative;
				border: 1px solid #00ff00;
			}

			.skill-fill {
				height: 100%;
				background: linear-gradient(90deg, #00ff00, #44ff44);
				transition: width 2s ease-in-out;
			}

			.loading-spinner {
				display: inline-block;
				animation: spin 1s linear infinite;
			}

			@keyframes spin {
				0% { transform: rotate(0deg); }
				100% { transform: rotate(360deg); }
			}
		</style>

		<script>
			class TerminalPortfolio {
				constructor() {
					this.bootContent = document.querySelector('.boot-content');
					this.bootScreen = document.getElementById('boot-sequence');
					this.terminalScreen = document.getElementById('interactive-terminal');
					this.output = document.getElementById('terminal-output');
					this.input = document.getElementById('terminal-input');
					this.commandHistory = [];
					this.historyIndex = -1;
					this.currentDirectory = '~';
					
					this.commands = {
						help: () => this.showHelp(),
						whoami: () => this.showWhoAmI(),
						ls: () => this.listFiles(),
						'cat about.txt': () => this.showAbout(),
						'./projects.sh': () => this.showProjects(),
						'skills --list': () => this.showSkills(),
						'skills --verbose': () => this.showSkillsVerbose(),
						'tail experience.log': () => this.showExperience(),
						contact: () => this.showContact(),
						clear: () => this.clearTerminal(),
						'sudo make-coffee': () => this.makeCoffee(),
						'rm -rf /boredom': () => this.removeBoredom(),
						'ls -la /secrets': () => this.showSecrets(),
						date: () => new Date().toString(),
						pwd: () => `/home/zain${this.currentDirectory === '~' ? '' : '/' + this.currentDirectory}`,
						uname: () => 'ZainOS 1.0.0 (Creative-Developer-Edition)',
						uptime: () => 'up 25 years, 0 users, load average: ∞'
					};

					this.init();
				}

				async init() {
					await this.runBootSequence();
					this.setupTerminal();
				}

				async runBootSequence() {
					this.bootSkipped = false;
					this.bootComplete = false;
					
					// Add skip instruction
					const skipInstruction = document.createElement('div');
					skipInstruction.className = 'skip-instruction';
					skipInstruction.textContent = 'Press ENTER to skip boot sequence';
					this.bootScreen.appendChild(skipInstruction);
					
					// Set up skip functionality
					const skipHandler = (e) => {
						if (e.key === 'Enter' && !this.bootComplete) {
							this.bootSkipped = true;
							document.removeEventListener('keydown', skipHandler);
							this.skipToEnd();
						}
					};
					document.addEventListener('keydown', skipHandler);

					const bootMessages = [
						'BIOS v2.4.1 - Zain\'s Portfolio System',
						'Copyright (C) 2024 Creative Developer Inc.',
						'',
						'Memory Test: 32GB OK',
						'CPU: Intel Core i7-Creative @ 3.8GHz',
						'GPU: NVIDIA GeForce RTX-Imagination',
						'',
						'Loading kernel modules...',
						'[✓] personality.ko loaded',
						'[✓] skills.ko loaded',
						'[✓] experience.ko loaded',
						'[✓] creativity.ko loaded',
						'[✓] problem_solving.ko loaded',
						'',
						'Starting services...',
						'[✓] Web Development Service',
						'[✓] Problem Solving Daemon',
						'[✓] Coffee Brewing Service',
						'[✓] Late Night Coding Mode',
						'[✓] Debugging Wizard',
						'',
						'Initializing portfolio interface...',
						'Loading user data... ████████████ 100%',
						'Mounting projects filesystem... ████████████ 100%',
						'Starting interactive shell... ████████████ 100%',
						'',
						'System ready. Press ENTER to continue...'
					];

					for (let i = 0; i < bootMessages.length; i++) {
						if (this.bootSkipped) break;
						
						await this.typeText(bootMessages[i] + '\n', 50);
						if (bootMessages[i].includes('Loading') || bootMessages[i].includes('Starting')) {
							await this.sleep(200);
						}
					}

					this.bootComplete = true;
					
					if (!this.bootSkipped) {
						await this.sleep(1000);
					}
					
					// Set up continue functionality
					const continueHandler = (e) => {
						if (e.key === 'Enter') {
							document.removeEventListener('keydown', continueHandler);
							this.transitionToTerminal();
						}
					};
					document.addEventListener('keydown', continueHandler);
				}

				async skipToEnd() {
					// Clear current content and show final message
					this.bootContent.textContent = '';
					await this.typeText('Boot sequence skipped...\n\nSystem ready. Press ENTER to continue...', 10);
				}

				async transitionToTerminal() {
					this.bootScreen.style.opacity = '0';
					this.bootScreen.style.transition = 'opacity 1s ease-out';
					
					setTimeout(() => {
						this.bootScreen.style.display = 'none';
						this.terminalScreen.style.display = 'block';
						this.terminalScreen.style.opacity = '0';
						this.terminalScreen.style.transition = 'opacity 1s ease-in';
						
						setTimeout(() => {
							this.terminalScreen.style.opacity = '1';
							this.showWelcomeMessage();
							this.input.focus();
						}, 100);
					}, 1000);
				}

				async showWelcomeMessage() {
					const welcome = `
Zain's Portfolio Terminal v1.0.0
Last login: ${new Date().toLocaleString()} from creative-mind.local

Welcome to my interactive portfolio!
Type 'help' to see available commands or just start exploring.

`;
					await this.typeToOutput(welcome, 12);
				}

				setupTerminal() {
					this.input.addEventListener('keydown', (e) => {
						if (e.key === 'Enter') {
							this.executeCommand();
						} else if (e.key === 'ArrowUp') {
							e.preventDefault();
							this.navigateHistory(-1);
						} else if (e.key === 'ArrowDown') {
							e.preventDefault();
							this.navigateHistory(1);
						}
					});
				}

				async executeCommand() {
					const command = this.input.value.trim();
					if (!command) return;

					this.commandHistory.push(command);
					this.historyIndex = this.commandHistory.length;

					// Clear input immediately after capturing command
					this.input.value = '';

					await this.typeToOutput(`zain@portfolio:~$ ${command}\n`, 0);
					
					if (this.commands[command]) {
						const result = await this.commands[command]();
						if (result) {
							await this.typeToOutput(result + '\n\n', 8);
						}
					} else {
						await this.typeToOutput(`Command not found: ${command}\nType 'help' for available commands.\n\n`, 8);
					}

					this.scrollToBottom();
				}

				navigateHistory(direction) {
					if (this.commandHistory.length === 0) return;

					this.historyIndex += direction;
					
					if (this.historyIndex < 0) {
						this.historyIndex = 0;
					} else if (this.historyIndex >= this.commandHistory.length) {
						this.historyIndex = this.commandHistory.length;
						this.input.value = '';
						return;
					}

					this.input.value = this.commandHistory[this.historyIndex] || '';
				}

				async typeText(text, speed = 15) {
					const tokens = this.tokenizeText(text);
					for (let token of tokens) {
						this.bootContent.textContent += token;
						await this.sleep(speed);
					}
				}

				async typeToOutput(text, speed = 8) {
					const span = document.createElement('span');
					this.output.appendChild(span);
					
					const tokens = this.tokenizeText(text);
					for (let token of tokens) {
						span.textContent += token;
						this.scrollToBottom();
						await this.sleep(speed);
					}
				}

				tokenizeText(text) {
					// Split text into tokens (words, punctuation, whitespace)
					const tokens = [];
					let currentToken = '';
					
					for (let i = 0; i < text.length; i++) {
						const char = text[i];
						
						if (char === ' ' || char === '\n' || char === '\t') {
							if (currentToken) {
								tokens.push(currentToken);
								currentToken = '';
							}
							tokens.push(char);
						} else if (/[.,!?;:()[\]{}'"<>]/.test(char)) {
							if (currentToken) {
								tokens.push(currentToken);
								currentToken = '';
							}
							tokens.push(char);
						} else if (char === '█' || char === '░') {
							// Handle progress bar characters individually for smooth animation
							if (currentToken) {
								tokens.push(currentToken);
								currentToken = '';
							}
							tokens.push(char);
						} else {
							currentToken += char;
						}
					}
					
					if (currentToken) {
						tokens.push(currentToken);
					}
					
					return tokens;
				}

				sleep(ms) {
					return new Promise(resolve => setTimeout(resolve, ms));
				}

				scrollToBottom() {
					const terminalBody = document.querySelector('.terminal-body');
					terminalBody.scrollTop = terminalBody.scrollHeight;
				}

				clearTerminal() {
					this.output.innerHTML = '';
					return '';
				}

				showHelp() {
					return `Available commands:

Basic Commands:
  help              Show this help message
  whoami            Display information about me
  ls                List available files and directories
  clear             Clear the terminal screen
  pwd               Show current directory
  date              Show current date and time
  uname             Show system information

Portfolio Commands:
  cat about.txt     Read detailed information about me
  ./projects.sh     Launch interactive project browser
  skills --list     Show my technical skills
  skills --verbose  Show detailed skill levels with progress bars
  tail experience.log  Show my work experience
  contact           Display contact information

Easter Eggs:
  sudo make-coffee  Brew some virtual coffee
  rm -rf /boredom   Remove all boredom from the system
  ls -la /secrets   List hidden secrets (if you dare)

Pro tip: Use arrow keys to navigate command history!`;
				}

				showWhoAmI() {
					return `
    ███████╗ █████╗ ██╗███╗   ██╗
    ╚══███╔╝██╔══██╗██║████╗  ██║
      ███╔╝ ███████║██║██╔██╗ ██║
     ███╔╝  ██╔══██║██║██║╚██╗██║
    ███████╗██║  ██║██║██║ ╚████║
    ╚══════╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝

Hello! I'm Zain, a passionate full-stack developer who loves creating 
digital experiences that matter. I turn coffee into code and ideas 
into reality.

Current Status: Available for exciting opportunities
Location: Earth (Remote-friendly)
Favorite Language: JavaScript (but I speak many others)
Superpower: Debugging at 3 AM`;
				}

				listFiles() {
					return `total 42
drwxr-xr-x  8 zain zain  4096 ${new Date().toLocaleDateString()} .
drwxr-xr-x  3 root root  4096 ${new Date().toLocaleDateString()} ..
-rw-r--r--  1 zain zain  2048 ${new Date().toLocaleDateString()} about.txt
-rwxr-xr-x  1 zain zain  4096 ${new Date().toLocaleDateString()} projects.sh
-rw-r--r--  1 zain zain  1024 ${new Date().toLocaleDateString()} skills.json
-rw-r--r--  1 zain zain  8192 ${new Date().toLocaleDateString()} experience.log
-rw-r--r--  1 zain zain   512 ${new Date().toLocaleDateString()} contact.vcard
drwxr-xr-x  2 zain zain  4096 ${new Date().toLocaleDateString()} projects/
drwx------  2 zain zain  4096 ${new Date().toLocaleDateString()} .secrets/`;
				}

				showAbout() {
					return `# About Zain

## Who Am I?
I'm a creative developer with a passion for building things that make 
people's lives easier and more enjoyable. With several years of experience 
in full-stack development, I've worked on everything from small business 
websites to large-scale applications.

## What Drives Me?
- 🚀 Creating seamless user experiences
- 🔧 Solving complex technical challenges  
- 🌱 Continuous learning and growth
- 🤝 Collaborating with amazing teams
- ☕ Converting caffeine into clean code

## My Philosophy
"Code is poetry written for machines but read by humans."

I believe in writing clean, maintainable code that tells a story. 
Every project is an opportunity to learn something new and create 
something meaningful.

## Fun Facts
- I've debugged code in my dreams (and it actually worked!)
- My rubber duck debugging collection has 7 members
- I can center a div in CSS... most of the time
- Stack Overflow is my second home`;
				}

				showProjects() {
					return `
🚀 PROJECT LAUNCHER v2.1.0
==============================

Loading projects... ████████████ 100%

Featured Projects:
┌─────────────────────────────────────────────────────────────┐
│ 1. E-Commerce Platform                    [React, Node.js]  │
│    Full-stack shopping experience with payment integration  │
│                                                             │
│ 2. Task Management App                    [Vue.js, Python] │
│    Collaborative project management with real-time updates │
│                                                             │
│ 3. Weather Dashboard                      [JavaScript, API]│
│    Beautiful weather visualization with location services  │
│                                                             │
│ 4. Portfolio Website                      [Astro, CSS]     │
│    This very terminal you're using right now!              │
│                                                             │
│ 5. Open Source Contributions             [Various]         │
│    Contributing to the developer community                 │
└─────────────────────────────────────────────────────────────┘

Type 'cat projects/[number].md' for detailed information
Example: cat projects/1.md`;
				}

				showSkills() {
					return `Technical Skills Inventory:
============================

Frontend:
  • JavaScript (ES6+)
  • TypeScript  
  • React.js
  • Vue.js
  • HTML5 & CSS3
  • Sass/SCSS
  • Tailwind CSS

Backend:
  • Node.js
  • Python
  • Express.js
  • FastAPI
  • RESTful APIs
  • GraphQL

Database:
  • PostgreSQL
  • MongoDB
  • Redis
  • SQLite

Tools & Others:
  • Git & GitHub
  • Docker
  • AWS/Cloud Services
  • Webpack/Vite
  • Jest/Testing
  • Linux/Unix

Use 'skills --verbose' for detailed proficiency levels.`;
				}

				async showSkillsVerbose() {
					const skills = [
						{ name: 'JavaScript', level: 95 },
						{ name: 'React.js', level: 90 },
						{ name: 'Node.js', level: 85 },
						{ name: 'TypeScript', level: 80 },
						{ name: 'Python', level: 75 },
						{ name: 'CSS/SCSS', level: 88 },
						{ name: 'Git', level: 92 },
						{ name: 'Docker', level: 70 },
						{ name: 'AWS', level: 65 },
						{ name: 'PostgreSQL', level: 78 }
					];

					let output = 'Skill Proficiency Analysis:\n';
					output += '=' .repeat(50) + '\n\n';

					for (const skill of skills) {
						const barLength = 30;
						const filled = Math.round((skill.level / 100) * barLength);
						const empty = barLength - filled;
						const bar = '█'.repeat(filled) + '░'.repeat(empty);
						
						output += `${skill.name.padEnd(12)} [${bar}] ${skill.level}%\n`;
					}

					output += '\nLegend: █ = Proficient, ░ = Learning\n';
					output += 'Note: These bars are animated in real-time!';

					return output;
				}

				showExperience() {
					return `[2024-01-15 09:00:00] INFO: Started new exciting opportunities
[2023-06-01 08:30:00] INFO: Completed major project milestone
[2023-03-15 14:20:00] DEBUG: Fixed critical production bug in 2 hours
[2022-11-20 16:45:00] INFO: Led team of 4 developers on React migration
[2022-08-10 10:15:00] SUCCESS: Deployed scalable microservices architecture
[2022-05-01 09:00:00] INFO: Promoted to Senior Developer role
[2021-12-15 13:30:00] INFO: Implemented CI/CD pipeline, reduced deploy time by 80%
[2021-09-01 08:00:00] INFO: Joined amazing development team
[2021-06-15 11:20:00] SUCCESS: Graduated with Computer Science degree
[2020-03-01 10:00:00] INFO: Started journey as Junior Developer

Use 'grep ERROR experience.log' to see challenges overcome
Use 'grep SUCCESS experience.log' to see major achievements`;
				}

				showContact() {
					return `
📧 CONTACT INFORMATION
======================

Email:    zain@example.com
LinkedIn: linkedin.com/in/zain-dev
GitHub:   github.com/zain-dev
Twitter:  @zain_codes
Website:  zain-portfolio.dev

📍 Location: Available for remote work worldwide
🕐 Timezone: UTC+0 (flexible for collaboration)

💬 Preferred Contact Methods:
   1. Email (for formal inquiries)
   2. LinkedIn (for professional networking)
   3. GitHub (for code-related discussions)

📝 Currently: Open to new opportunities
🎯 Interests: Full-stack development, DevOps, Open Source

Feel free to reach out! I usually respond within 24 hours.`;
				}

				makeCoffee() {
					return `
☕ COFFEE BREWING SYSTEM v3.1.4
===============================

Initializing coffee maker... ✓
Grinding beans... ████████████ 100%
Heating water to optimal temperature (195°F)... ✓
Brewing... ████████████ 100%

        (  )   (   )  )
         ) (   )  (  (
         ( )  (    ) )
         _____________
        <_____________> ___
        |             |/ _ \\
        |               | | |
        |               |_| |
     ___|             |\\___/
    /    \\___________/    \\
    \\_____________________/

☕ Your virtual coffee is ready!

WARNING: This coffee may cause increased productivity,
         better code quality, and sudden urges to refactor.

Side effects may include: staying up late coding,
having brilliant ideas at 3 AM, and an addiction to
clean, readable code.`;
				}

				removeBoredom() {
					return `
🗑️  BOREDOM REMOVAL UTILITY v2.0
=================================

Scanning system for boredom... ████████████ 100%

Found boredom in:
  /usr/local/mundane_tasks/
  /home/zain/repetitive_work/
  /tmp/boring_meetings/
  /var/log/dull_moments.log

Removing boredom... ████████████ 100%

rm: removing '/boredom/lack_of_creativity'... ✓
rm: removing '/boredom/repetitive_tasks'... ✓  
rm: removing '/boredom/uninspiring_projects'... ✓
rm: removing '/boredom/monday_blues'... ✓

SUCCESS: All boredom has been successfully removed!

System now running at optimal creativity levels.
Fun.exe is now running in the background.
Inspiration daemon started successfully.

Warning: Side effects may include uncontrollable urges to
build cool projects and learn new technologies!`;
				}

				showSecrets() {
					return `
🔐 ACCESSING CLASSIFIED DIRECTORY...
====================================

Authentication required... ✓
Decrypting files... ████████████ 100%

total 13
-rw------- 1 zain zain  256 ${new Date().toLocaleDateString()} .hidden_talents
-rw------- 1 zain zain  128 ${new Date().toLocaleDateString()} .secret_projects  
-rw------- 1 zain zain  512 ${new Date().toLocaleDateString()} .future_plans
-rw------- 1 zain zain   64 ${new Date().toLocaleDateString()} .favorite_memes
-rw------- 1 zain zain  1024 ${new Date().toLocaleDateString()} .dream_job.txt

🤫 Secret revealed: I once spent 6 hours debugging a problem
   that was caused by a missing semicolon. Don't tell anyone!

🎮 Hidden talent: I can solve a Rubik's cube while explaining
   the difference between == and === in JavaScript.

🚀 Secret project: Building an AI that generates perfect
   commit messages (still in beta, currently just suggests
   "fixed stuff" for everything).

🎯 Future plan: Become the developer who actually reads the
   documentation before asking questions on Stack Overflow.

Access granted. You're now part of the secret club! 🎉`;
				}
			}

			// Initialize the terminal when the page loads
			document.addEventListener('DOMContentLoaded', () => {
				new TerminalPortfolio();
			});
		</script>
	</body>
</html>
